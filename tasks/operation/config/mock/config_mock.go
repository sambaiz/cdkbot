// Code generated by MockGen. DO NOT EDIT.
// Source: tasks/operation/config/config.go
//
// Generated by this command:
//
//	mockgen -package mock -source tasks/operation/config/config.go -destination tasks/operation/config/mock/config_mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	config "github.com/sambaiz/cdkbot/tasks/operation/config"
	gomock "go.uber.org/mock/gomock"
)

// MockReaderer is a mock of Readerer interface.
type MockReaderer struct {
	ctrl     *gomock.Controller
	recorder *MockReadererMockRecorder
}

// MockReadererMockRecorder is the mock recorder for MockReaderer.
type MockReadererMockRecorder struct {
	mock *MockReaderer
}

// NewMockReaderer creates a new mock instance.
func NewMockReaderer(ctrl *gomock.Controller) *MockReaderer {
	mock := &MockReaderer{ctrl: ctrl}
	mock.recorder = &MockReadererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReaderer) EXPECT() *MockReadererMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockReaderer) Read(path string) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", path)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReadererMockRecorder) Read(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReaderer)(nil).Read), path)
}
