// Code generated by MockGen. DO NOT EDIT.
// Source: tasks/operation/cdk/cdk.go
//
// Generated by this command:
//
//	mockgen -package mock -source tasks/operation/cdk/cdk.go -destination tasks/operation/cdk/mock/cdk_mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClienter is a mock of Clienter interface.
type MockClienter struct {
	ctrl     *gomock.Controller
	recorder *MockClienterMockRecorder
}

// MockClienterMockRecorder is the mock recorder for MockClienter.
type MockClienterMockRecorder struct {
	mock *MockClienter
}

// NewMockClienter creates a new mock instance.
func NewMockClienter(ctrl *gomock.Controller) *MockClienter {
	mock := &MockClienter{ctrl: ctrl}
	mock.recorder = &MockClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClienter) EXPECT() *MockClienterMockRecorder {
	return m.recorder
}

// Deploy mocks base method.
func (m *MockClienter) Deploy(repoPath string, stacks []string, contexts map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", repoPath, stacks, contexts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deploy indicates an expected call of Deploy.
func (mr *MockClienterMockRecorder) Deploy(repoPath, stacks, contexts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockClienter)(nil).Deploy), repoPath, stacks, contexts)
}

// Diff mocks base method.
func (m *MockClienter) Diff(repoPath string, stacks []string, contexts map[string]string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Diff", repoPath, stacks, contexts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Diff indicates an expected call of Diff.
func (mr *MockClienterMockRecorder) Diff(repoPath, stacks, contexts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Diff", reflect.TypeOf((*MockClienter)(nil).Diff), repoPath, stacks, contexts)
}

// List mocks base method.
func (m *MockClienter) List(repoPath string, contexts map[string]string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", repoPath, contexts)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClienterMockRecorder) List(repoPath, contexts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClienter)(nil).List), repoPath, contexts)
}

// Setup mocks base method.
func (m *MockClienter) Setup(repoPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", repoPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockClienterMockRecorder) Setup(repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockClienter)(nil).Setup), repoPath)
}
