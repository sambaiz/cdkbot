// Code generated by MockGen. DO NOT EDIT.
// Source: tasks/operation/git/git.go
//
// Generated by this command:
//
//	mockgen -package mock -source tasks/operation/git/git.go -destination tasks/operation/git/mock/git_mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClienter is a mock of Clienter interface.
type MockClienter struct {
	ctrl     *gomock.Controller
	recorder *MockClienterMockRecorder
}

// MockClienterMockRecorder is the mock recorder for MockClienter.
type MockClienterMockRecorder struct {
	mock *MockClienter
}

// NewMockClienter creates a new mock instance.
func NewMockClienter(ctrl *gomock.Controller) *MockClienter {
	mock := &MockClienter{ctrl: ctrl}
	mock.recorder = &MockClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClienter) EXPECT() *MockClienterMockRecorder {
	return m.recorder
}

// Checkout mocks base method.
func (m *MockClienter) Checkout(path, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", path, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout.
func (mr *MockClienterMockRecorder) Checkout(path, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockClienter)(nil).Checkout), path, branch)
}

// CheckoutFile mocks base method.
func (m *MockClienter) CheckoutFile(path, fileName, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutFile", path, fileName, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckoutFile indicates an expected call of CheckoutFile.
func (mr *MockClienterMockRecorder) CheckoutFile(path, fileName, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutFile", reflect.TypeOf((*MockClienter)(nil).CheckoutFile), path, fileName, branch)
}

// Clone mocks base method.
func (m *MockClienter) Clone(path string, hash *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", path, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockClienterMockRecorder) Clone(path, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockClienter)(nil).Clone), path, hash)
}

// Merge mocks base method.
func (m *MockClienter) Merge(path, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", path, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Merge indicates an expected call of Merge.
func (mr *MockClienterMockRecorder) Merge(path, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockClienter)(nil).Merge), path, branch)
}
