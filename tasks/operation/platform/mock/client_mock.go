// Code generated by MockGen. DO NOT EDIT.
// Source: tasks/operation/platform/client.go
//
// Generated by this command:
//
//	mockgen -package mock -source tasks/operation/platform/client.go -destination tasks/operation/platform/mock/client_mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	constant "github.com/sambaiz/cdkbot/tasks/operation/constant"
	platform "github.com/sambaiz/cdkbot/tasks/operation/platform"
	gomock "go.uber.org/mock/gomock"
)

// MockClienter is a mock of Clienter interface.
type MockClienter struct {
	ctrl     *gomock.Controller
	recorder *MockClienterMockRecorder
}

// MockClienterMockRecorder is the mock recorder for MockClienter.
type MockClienterMockRecorder struct {
	mock *MockClienter
}

// NewMockClienter creates a new mock instance.
func NewMockClienter(ctrl *gomock.Controller) *MockClienter {
	mock := &MockClienter{ctrl: ctrl}
	mock.recorder = &MockClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClienter) EXPECT() *MockClienterMockRecorder {
	return m.recorder
}

// AddLabel mocks base method.
func (m *MockClienter) AddLabel(ctx context.Context, label constant.Label) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabel", ctx, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabel indicates an expected call of AddLabel.
func (mr *MockClienterMockRecorder) AddLabel(ctx, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabel", reflect.TypeOf((*MockClienter)(nil).AddLabel), ctx, label)
}

// AddLabelToOtherPR mocks base method.
func (m *MockClienter) AddLabelToOtherPR(ctx context.Context, label constant.Label, number int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabelToOtherPR", ctx, label, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabelToOtherPR indicates an expected call of AddLabelToOtherPR.
func (mr *MockClienterMockRecorder) AddLabelToOtherPR(ctx, label, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabelToOtherPR", reflect.TypeOf((*MockClienter)(nil).AddLabelToOtherPR), ctx, label, number)
}

// CreateComment mocks base method.
func (m *MockClienter) CreateComment(ctx context.Context, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockClienterMockRecorder) CreateComment(ctx, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockClienter)(nil).CreateComment), ctx, body)
}

// DeleteComment mocks base method.
func (m *MockClienter) DeleteComment(ctx context.Context, commentID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockClienterMockRecorder) DeleteComment(ctx, commentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockClienter)(nil).DeleteComment), ctx, commentID)
}

// GetOpenPullRequests mocks base method.
func (m *MockClienter) GetOpenPullRequests(ctx context.Context) ([]platform.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenPullRequests", ctx)
	ret0, _ := ret[0].([]platform.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenPullRequests indicates an expected call of GetOpenPullRequests.
func (mr *MockClienterMockRecorder) GetOpenPullRequests(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenPullRequests", reflect.TypeOf((*MockClienter)(nil).GetOpenPullRequests), ctx)
}

// GetPullRequest mocks base method.
func (m *MockClienter) GetPullRequest(ctx context.Context) (*platform.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequest", ctx)
	ret0, _ := ret[0].(*platform.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest.
func (mr *MockClienterMockRecorder) GetPullRequest(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockClienter)(nil).GetPullRequest), ctx)
}

// ListComments mocks base method.
func (m *MockClienter) ListComments(ctx context.Context) ([]platform.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", ctx)
	ret0, _ := ret[0].([]platform.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComments indicates an expected call of ListComments.
func (mr *MockClienterMockRecorder) ListComments(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockClienter)(nil).ListComments), ctx)
}

// MergePullRequest mocks base method.
func (m *MockClienter) MergePullRequest(ctx context.Context, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergePullRequest", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergePullRequest indicates an expected call of MergePullRequest.
func (mr *MockClienterMockRecorder) MergePullRequest(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePullRequest", reflect.TypeOf((*MockClienter)(nil).MergePullRequest), ctx, message)
}

// RemoveLabel mocks base method.
func (m *MockClienter) RemoveLabel(ctx context.Context, label constant.Label) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLabel", ctx, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLabel indicates an expected call of RemoveLabel.
func (mr *MockClienterMockRecorder) RemoveLabel(ctx, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLabel", reflect.TypeOf((*MockClienter)(nil).RemoveLabel), ctx, label)
}

// SetStatus mocks base method.
func (m *MockClienter) SetStatus(ctx context.Context, state constant.State, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", ctx, state, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockClienterMockRecorder) SetStatus(ctx, state, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockClienter)(nil).SetStatus), ctx, state, description)
}
